{"backend_state":"init","connection_file":"/projects/f5f38597-12ca-4603-94d4-a86293c3f1cc/.local/share/jupyter/runtime/kernel-b78d0f3b-e567-438e-b71a-006a151c35c3.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1632091579738,"exec_count":20,"id":"636977","input":"eval_result = number_one == number_two\nprint(eval_result)\n#eval_result is a variable... lets check the type. \ntype(eval_result)","kernel":"python3-ubuntu","metadata":{"pycharm":{"name":"#%%\n"}},"output":{"0":{"name":"stdout","text":"False\n"},"1":{"data":{"text/plain":"bool"},"exec_count":20}},"pos":8,"start":1632091579730,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"05bc79","input":"true = True","metadata":{"pycharm":{"name":"#%%\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"978294","input":"number_one > number_two > -number_one","metadata":{"pycharm":{"name":"#%%\n"}},"output":{"0":{"data":{"text/plain":"True"},"exec_count":10,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"c36ca7","input":"true_number = 1\nis_joseph_in_USA = True\n\nfalse_number = 0\nis_mitch_in_USA = True\n\n#a boolean above zero is true.\n#a boolean equal to zero is false.\n#a boolean below zero is true.\nprint(bool(-10))","kernel":"python3-ubuntu","metadata":{"pycharm":{"name":"#%%\n"}},"output":{"0":{"name":"stdout","text":"True\n"}},"pos":4,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":18,"id":"cf1552","input":"number_one = 250\nnumber_two = 125","kernel":"python3-ubuntu","metadata":{"pycharm":{"name":"#%%\n"}},"output":{"0":{"data":{"text/plain":"True"},"exec_count":18}},"pos":7,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"190d6b","input":"false = False","metadata":{"pycharm":{"name":"#%%\n"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"486a26","input":"number_one != number_two","metadata":{"pycharm":{"name":"#%%\n"}},"output":{"0":{"data":{"text/plain":"True"},"exec_count":7,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"9070ca","input":"number_one > number_two","metadata":{"pycharm":{"name":"#%%\n"}},"output":{"0":{"data":{"text/plain":"True"},"exec_count":8,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"088813","input":"number_one >= number_two and number_two > -number_one","metadata":{"pycharm":{"name":"#%%\n"}},"output":{"0":{"data":{"text/plain":"True"},"exec_count":9,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"1549db","input":"## Evaluations\nWhen you evaluate an expression in Python, it will return a Boolean value.\n\n### Logical operators\n```\nnot     Reverses the evaluation\nand     Returns True if both values are true\nor      Returns True if at least one of the values is true\n```\n","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"2929f7","input":"## Boolean as a number\n\nBoolean values can be seen as: 1 for True, 0 for False.","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"6c2af5","input":"# Boolean Types\nA boolean type can have two possible values: *True* or *False*.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"87207f","input":"### Comparison operators\n```\n>       Greater than\n>=      Greater or equal than\n<       Lower than\n<=      Lower or equal than\n==      Equal than **weird** -- we use two == to check equal to because we set variables with one =. \n!=      Different from **weird** In computers, the bang (!) symbol represents ~not~.\n```","pos":6,"type":"cell"}
{"id":0,"time":1632692087613,"type":"user"}
{"last_load":1632090860809,"type":"file"}